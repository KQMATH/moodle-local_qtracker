{"version":3,"file":"questions_table_page.min.js","sources":["../src/questions_table_page.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Class for handling page with table of questions with issues.\n *\n * @module     local_qtracker/QuestionsTablePage\n * @class      QuestionsTablePage\n * @package    local_qtracker\n * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2021 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport Ajax from 'core/ajax';\nimport url from 'core/url';\nimport Sidebar from 'local_qtracker/sidebar';\n\n/**\n * Constructor\n * @constructor\n * @param {String} selector used to find triggers for the new group modal.\n * @param {int} contextid\n *\n * Each call to init gets it's own instance of this class.\n */\nclass QuestionsTablePage {\n    courseid = null;\n\n    constructor(courseid) {\n        this.courseid = courseid;\n        this.sidebar = new Sidebar('#questions-table-sidebar', false, \"right\", false, '20%');\n        this.init();\n    }\n\n    async init() {\n\n        await this.sidebar.render();\n        window.showIssuesInPane = async function (id, state = null) {\n            this.sidebar.empty();\n            this.sidebar.setLoading(true);\n\n            // Get question title.\n            let questionData = await this.loadQuestionData(id);\n            let question = questionData.question;\n            let questionEditUrl = this.getQuestionEditUrl(this.courseid, id);\n            let link = $('<a></a>').attr(\"href\", questionEditUrl).html(question.name + \" #\" + question.id);\n            this.sidebar.setTitle(link);\n            this.sidebar.show();\n\n            // Get issues data.\n            let issuesResponse = await this.loadIssues(id, state);\n            let issues = issuesResponse.issues;\n\n            // Get users data.\n            let userids = [...new Set(issues.map(issue => issue.userid))];\n            let usersData = await this.loadUsersData(userids);\n\n            // Render issue items.\n            let promises = [];\n            issues.forEach(async issueData => {\n                let userData = usersData.find(({ id }) => id === issueData.userid);\n                promises.push(this.addIssueItem(issueData, userData));\n            });\n\n            self = this;\n            // When all issue item promises are resolved.\n            $.when.apply($, promises).done(function () {\n                self.sidebar.setLoading(false);\n                $.each(arguments, (index, argument) => {\n                    self.sidebar.addTemplateItem(argument.html, argument.js);\n                });\n            }).catch(e => {\n                console.error(e);\n            });\n\n        }.bind(this);\n\n        window.closeIssuesPane = function () { this.sidebar.hide() }.bind(this);\n        window.toggleIssuesPane = function () { this.sidebar.togglePane() }.bind(this);\n\n    }\n\n    /**\n     *\n     * @param {object} issueData\n     * @param {object} userData\n     * @return {Promise}\n     */\n    async addIssueItem(issueData, userData) {\n        // Fetch user data.\n        let issueurl = url.relativeUrl('/local/qtracker/issue.php', {\n            courseid: this.courseid,\n            issueid: issueData.id,\n        });\n        let userurl = url.relativeUrl('/user/view.php', {\n            course: this.courseid,\n            id: userData.id,\n        });\n\n        // Render issues pane\n        let paneContext = {\n            issueurl: issueurl,\n            userurl: userurl,\n            profileimageurl: userData.profileimageurlsmall,\n            fullname: userData.fullname,\n            timecreated: issueData.timecreated,\n            id: issueData.id,\n            title: issueData.title,\n            description: issueData.description,\n        };\n        let state = issueData.state;\n        paneContext[state] = true;\n\n        return Templates.render('local_qtracker/sidebar_item_issue', paneContext)\n            .then(function (html, js) {\n                return { html: html, js: js };\n            });\n    }\n\n    async loadIssues(id, state = null) {\n        let criteria = [\n            { key: 'questionid', value: id },\n        ];\n        if (state) {\n            criteria.push({ key: 'state', value: state });\n        }\n        let issuesData = await Ajax.call([{\n            methodname: 'local_qtracker_get_issues',\n            args: { criteria: criteria }\n        }])[0];\n\n        return issuesData;\n    }\n\n    async loadUsersData(ids) {\n        let usersData = await Ajax.call([{\n            methodname: 'core_user_get_users_by_field',\n            args: {\n                field: 'id',\n                values: ids\n            }\n        }])[0];\n        return usersData;\n    }\n\n    getQuestionEditUrl(courseid, questionid) {\n        let returnurl = encodeURIComponent(location.pathname + location.search);\n        let editurl = url.relativeUrl('/question/bank/editquestion/question.php', {\n            courseid: courseid,\n            id: questionid,\n            returnurl: returnurl,\n        });\n        return editurl;\n    }\n\n    decodeHTML(html) {\n        var doc = new DOMParser().parseFromString(html, \"text/html\");\n        return doc.documentElement.textContent;\n    }\n\n    async loadQuestionData(id) {\n        let userData = await Ajax.call([{\n            methodname: 'local_qtracker_get_question',\n            args: {\n                id: id\n            }\n        }])[0];\n        return userData;\n    }\n}\n\nexport default QuestionsTablePage;\n"],"names":["constructor","courseid","sidebar","Sidebar","init","this","render","window","showIssuesInPane","async","id","state","empty","setLoading","questionData","loadQuestionData","question","questionEditUrl","getQuestionEditUrl","link","attr","html","name","setTitle","show","issuesResponse","loadIssues","issues","userids","Set","map","issue","userid","usersData","loadUsersData","promises","forEach","userData","find","_ref","issueData","push","addIssueItem","self","when","apply","$","done","each","arguments","index","argument","addTemplateItem","js","catch","e","console","error","bind","closeIssuesPane","hide","toggleIssuesPane","togglePane","paneContext","issueurl","url","relativeUrl","issueid","userurl","course","profileimageurl","profileimageurlsmall","fullname","timecreated","title","description","Templates","then","criteria","key","value","Ajax","call","methodname","args","ids","field","values","questionid","returnurl","encodeURIComponent","location","pathname","search","decodeHTML","DOMParser","parseFromString","documentElement","textContent"],"mappings":"yjBA0CIA,YAAYC,kCAFD,6IAGFA,SAAWA,cACXC,QAAU,IAAIC,iBAAQ,4BAA4B,EAAO,SAAS,EAAO,YACzEC,0BAKCC,KAAKH,QAAQI,SACnBC,OAAOC,iBAAmBC,eAAgBC,QAAIC,6DAAQ,UAC7CT,QAAQU,aACRV,QAAQW,YAAW,OAGpBC,mBAAqBT,KAAKU,iBAAiBL,IAC3CM,SAAWF,aAAaE,SACxBC,gBAAkBZ,KAAKa,mBAAmBb,KAAKJ,SAAUS,IACzDS,MAAO,mBAAE,WAAWC,KAAK,OAAQH,iBAAiBI,KAAKL,SAASM,KAAO,KAAON,SAASN,SACtFR,QAAQqB,SAASJ,WACjBjB,QAAQsB,WAGTC,qBAAuBpB,KAAKqB,WAAWhB,GAAIC,OAC3CgB,OAASF,eAAeE,OAGxBC,QAAU,IAAI,IAAIC,IAAIF,OAAOG,KAAIC,OAASA,MAAMC,WAChDC,gBAAkB5B,KAAK6B,cAAcN,SAGrCO,SAAW,GACfR,OAAOS,SAAQ3B,MAAAA,gBACP4B,SAAWJ,UAAUK,MAAKC,WAAC7B,GAAEA,gBAASA,KAAO8B,UAAUR,UAC3DG,SAASM,KAAKpC,KAAKqC,aAAaF,UAAWH,cAG/CM,KAAOtC,qBAELuC,KAAKC,MAAMC,gBAAGX,UAAUY,MAAK,WAC3BJ,KAAKzC,QAAQW,YAAW,mBACtBmC,KAAKC,WAAW,CAACC,MAAOC,YACtBR,KAAKzC,QAAQkD,gBAAgBD,SAAS9B,KAAM8B,SAASE,UAE1DC,OAAMC,IACLC,QAAQC,MAAMF,OAGpBG,KAAKrD,MAEPE,OAAOoD,gBAAkB,gBAAmBzD,QAAQ0D,QAASF,KAAKrD,MAClEE,OAAOsD,iBAAmB,gBAAmB3D,QAAQ4D,cAAeJ,KAAKrD,yBAU1DmC,UAAWH,cAYtB0B,YAAc,CACdC,SAXWC,aAAIC,YAAY,4BAA6B,CACxDjE,SAAUI,KAAKJ,SACfkE,QAAS3B,UAAU9B,KAUnB0D,QARUH,aAAIC,YAAY,iBAAkB,CAC5CG,OAAQhE,KAAKJ,SACbS,GAAI2B,SAAS3B,KAOb4D,gBAAiBjC,SAASkC,qBAC1BC,SAAUnC,SAASmC,SACnBC,YAAajC,UAAUiC,YACvB/D,GAAI8B,UAAU9B,GACdgE,MAAOlC,UAAUkC,MACjBC,YAAanC,UAAUmC,oBAG3BZ,YADYvB,UAAU7B,QACD,EAEdiE,mBAAUtE,OAAO,oCAAqCyD,aACxDc,MAAK,SAAUxD,KAAMgC,UACX,CAAEhC,KAAMA,KAAMgC,GAAIA,wBAIpB3C,QAAIC,6DAAQ,KACrBmE,SAAW,CACX,CAAEC,IAAK,aAAcC,MAAOtE,YAE5BC,OACAmE,SAASrC,KAAK,CAAEsC,IAAK,QAASC,MAAOrE,cAElBsE,cAAKC,KAAK,CAAC,CAC9BC,WAAY,4BACZC,KAAM,CAAEN,SAAUA,aAClB,uBAKYO,kBACMJ,cAAKC,KAAK,CAAC,CAC7BC,WAAY,+BACZC,KAAM,CACFE,MAAO,KACPC,OAAQF,QAEZ,GAIRnE,mBAAmBjB,SAAUuF,gBACrBC,UAAYC,mBAAmBC,SAASC,SAAWD,SAASE,eAClD5B,aAAIC,YAAY,2CAA4C,CACtEjE,SAAUA,SACVS,GAAI8E,WACJC,UAAWA,YAKnBK,WAAWzE,aACG,IAAI0E,WAAYC,gBAAgB3E,KAAM,aACrC4E,gBAAgBC,mCAGRxF,iBACEuE,cAAKC,KAAK,CAAC,CAC5BC,WAAY,8BACZC,KAAM,CACF1E,GAAIA,OAER"}