{"version":3,"file":"issue_comment_controls.min.js","sources":["../src/issue_comment_controls.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Class for handling question issue page.\n *\n * @module     local_qtracker/QuestionIssuePage\n * @class      QuestionIssuePage\n * @package    local_qtracker\n * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2021 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport * as Str from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\n/**\n * Constructor\n * @constructor\n * @param {int} commentid\n *\n * Each call gets it's own instance of this class.\n */\nclass IssueCommentControls {\n    constructor(commentid) {\n        this.commentid = commentid;\n        this.init();\n    }\n\n    async init() {\n        this.registerDeleteButtonListener()\n        this.registerNotifyButtonListener()\n    }\n\n    async registerDeleteButtonListener() {\n\n        let trigger = $('#comment_delete_' + this.commentid);\n        let strObj = [\n            {\n                key: 'confirm',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'confirmdeletecomment',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'deletecomment',\n                component: 'local_qtracker'\n            }\n        ];\n\n        let strings = await Str.get_strings(strObj);\n\n        let modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[2],\n            body: strings[1],\n        }, trigger)\n\n        modal.setSaveButtonText(strings[0])\n        modal.getRoot().on(ModalEvents.save, function (e) {\n            // Stop the default save button behaviour which is to close the modal.\n            e.preventDefault();\n            let form = $('#comment_form_'  + this.commentid);\n            $('<input>').attr({\n                type: \"hidden\",\n                name: \"deletecommentid\",\n                value: this.commentid,\n            }).appendTo(form);\n            form.submit();\n        }.bind(this));\n    }\n\n    async registerNotifyButtonListener() {\n\n        let trigger = $('#comment_message_' + this.commentid);\n        let strObj = [\n            {\n                key: 'confirm',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'confirmsendcomment',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'sendcomment',\n                component: 'local_qtracker'\n            }\n        ];\n\n        let strings = await Str.get_strings(strObj);\n\n        let modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[2],\n            body: strings[1],\n        }, trigger)\n\n        modal.setSaveButtonText(strings[0])\n        modal.getRoot().on(ModalEvents.save, function (e) {\n            // Stop the default save button behaviour which is to close the modal.\n            e.preventDefault();\n            let form = $('#comment_form_'  + this.commentid);\n            $('<input>').attr({\n                type: \"hidden\",\n                name: \"notifycommentid\",\n                value: this.commentid,\n            }).appendTo(form);\n            form.submit();\n        }.bind(this));\n    }\n}\n\n\nexport default IssueCommentControls;\n"],"names":["constructor","commentid","init","registerDeleteButtonListener","registerNotifyButtonListener","trigger","this","strings","Str","get_strings","key","component","modal","ModalFactory","create","type","types","SAVE_CANCEL","title","body","setSaveButtonText","getRoot","on","ModalEvents","save","e","preventDefault","form","attr","name","value","appendTo","submit","bind"],"mappings":";;;;;;;;;;g5BAsCIA,YAAYC,gBACHA,UAAYA,eACZC,yBAIAC,oCACAC,wEAKDC,SAAU,mBAAE,mBAAqBC,KAAKL,WAgBtCM,cAAgBC,IAAIC,YAfX,CACT,CACIC,IAAK,UACLC,UAAW,kBAEf,CACID,IAAK,uBACLC,UAAW,kBAEf,CACID,IAAK,gBACLC,UAAW,oBAMfC,YAAcC,uBAAaC,OAAO,CAClCC,KAAMF,uBAAaG,MAAMC,YACzBC,MAAOX,QAAQ,GACfY,KAAMZ,QAAQ,IACfF,SAEHO,MAAMQ,kBAAkBb,QAAQ,IAChCK,MAAMS,UAAUC,GAAGC,sBAAYC,KAAM,SAAUC,GAE3CA,EAAEC,qBACEC,MAAO,mBAAE,iBAAoBrB,KAAKL,+BACpC,WAAW2B,KAAK,CACdb,KAAM,SACNc,KAAM,kBACNC,MAAOxB,KAAKL,YACb8B,SAASJ,MACZA,KAAKK,UACPC,KAAK3B,gDAKHD,SAAU,mBAAE,oBAAsBC,KAAKL,WAgBvCM,cAAgBC,IAAIC,YAfX,CACT,CACIC,IAAK,UACLC,UAAW,kBAEf,CACID,IAAK,qBACLC,UAAW,kBAEf,CACID,IAAK,cACLC,UAAW,oBAMfC,YAAcC,uBAAaC,OAAO,CAClCC,KAAMF,uBAAaG,MAAMC,YACzBC,MAAOX,QAAQ,GACfY,KAAMZ,QAAQ,IACfF,SAEHO,MAAMQ,kBAAkBb,QAAQ,IAChCK,MAAMS,UAAUC,GAAGC,sBAAYC,KAAM,SAAUC,GAE3CA,EAAEC,qBACEC,MAAO,mBAAE,iBAAoBrB,KAAKL,+BACpC,WAAW2B,KAAK,CACdb,KAAM,SACNc,KAAM,kBACNC,MAAOxB,KAAKL,YACb8B,SAASJ,MACZA,KAAKK,UACPC,KAAK3B"}