{"version":3,"sources":["../src/issue_comment_controls.js"],"names":["IssueCommentControls","commentid","init","registerDeleteButtonListener","registerNotifyButtonListener","trigger","strObj","key","component","Str","get_strings","strings","ModalFactory","create","type","types","SAVE_CANCEL","title","body","modal","setSaveButtonText","getRoot","on","ModalEvents","save","e","preventDefault","form","attr","name","value","appendTo","submit","bind"],"mappings":"+fAyBA,OACA,OACA,OACA,O,4tCASMA,CAAAA,C,YACF,WAAYC,CAAZ,CAAuB,WACnB,KAAKA,SAAL,CAAiBA,CAAjB,CACA,KAAKC,IAAL,EACH,C,gKAGG,KAAKC,4BAAL,GACA,KAAKC,4BAAL,G,0SAKIC,C,CAAU,cAAE,mBAAqB,KAAKJ,SAA5B,C,CACVK,C,CAAS,CACT,CACIC,GAAG,CAAE,SADT,CAEIC,SAAS,CAAE,gBAFf,CADS,CAKT,CACID,GAAG,CAAE,sBADT,CAEIC,SAAS,CAAE,gBAFf,CALS,CAST,CACID,GAAG,CAAE,eADT,CAEIC,SAAS,CAAE,gBAFf,CATS,C,gBAeOC,CAAAA,CAAG,CAACC,WAAJ,CAAgBJ,CAAhB,C,QAAhBK,C,uBAEcC,WAAaC,MAAb,CAAoB,CAClCC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,WADS,CAElCC,KAAK,CAAEN,CAAO,CAAC,CAAD,CAFoB,CAGlCO,IAAI,CAAEP,CAAO,CAAC,CAAD,CAHqB,CAApB,CAIfN,CAJe,C,QAAdc,C,QAMJA,CAAK,CAACC,iBAAN,CAAwBT,CAAO,CAAC,CAAD,CAA/B,EACAQ,CAAK,CAACE,OAAN,GAAgBC,EAAhB,CAAmBC,UAAYC,IAA/B,CAAqC,SAAUC,CAAV,CAAa,CAE9CA,CAAC,CAACC,cAAF,GACA,GAAIC,CAAAA,CAAI,CAAG,cAAE,iBAAoB,KAAK1B,SAA3B,CAAX,CACA,cAAE,SAAF,EAAa2B,IAAb,CAAkB,CACdd,IAAI,CAAE,QADQ,CAEde,IAAI,CAAE,iBAFQ,CAGdC,KAAK,CAAE,KAAK7B,SAHE,CAAlB,EAIG8B,QAJH,CAIYJ,CAJZ,EAKAA,CAAI,CAACK,MAAL,EACH,CAVoC,CAUnCC,IAVmC,CAU9B,IAV8B,CAArC,E,mUAeI5B,C,CAAU,cAAE,oBAAsB,KAAKJ,SAA7B,C,CACVK,C,CAAS,CACT,CACIC,GAAG,CAAE,SADT,CAEIC,SAAS,CAAE,gBAFf,CADS,CAKT,CACID,GAAG,CAAE,oBADT,CAEIC,SAAS,CAAE,gBAFf,CALS,CAST,CACID,GAAG,CAAE,aADT,CAEIC,SAAS,CAAE,gBAFf,CATS,C,gBAeOC,CAAAA,CAAG,CAACC,WAAJ,CAAgBJ,CAAhB,C,QAAhBK,C,uBAEcC,WAAaC,MAAb,CAAoB,CAClCC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,WADS,CAElCC,KAAK,CAAEN,CAAO,CAAC,CAAD,CAFoB,CAGlCO,IAAI,CAAEP,CAAO,CAAC,CAAD,CAHqB,CAApB,CAIfN,CAJe,C,QAAdc,C,QAMJA,CAAK,CAACC,iBAAN,CAAwBT,CAAO,CAAC,CAAD,CAA/B,EACAQ,CAAK,CAACE,OAAN,GAAgBC,EAAhB,CAAmBC,UAAYC,IAA/B,CAAqC,SAAUC,CAAV,CAAa,CAE9CA,CAAC,CAACC,cAAF,GACA,GAAIC,CAAAA,CAAI,CAAG,cAAE,iBAAoB,KAAK1B,SAA3B,CAAX,CACA,cAAE,SAAF,EAAa2B,IAAb,CAAkB,CACdd,IAAI,CAAE,QADQ,CAEde,IAAI,CAAE,iBAFQ,CAGdC,KAAK,CAAE,KAAK7B,SAHE,CAAlB,EAIG8B,QAJH,CAIYJ,CAJZ,EAKAA,CAAI,CAACK,MAAL,EACH,CAVoC,CAUnCC,IAVmC,CAU9B,IAV8B,CAArC,E,4JAeOjC,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Class for handling question issue page.\n *\n * @module     local_qtracker/QuestionIssuePage\n * @class      QuestionIssuePage\n * @package    local_qtracker\n * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2021 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport * as Str from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\n/**\n * Constructor\n * @constructor\n * @param {int} commentid\n *\n * Each call gets it's own instance of this class.\n */\nclass IssueCommentControls {\n    constructor(commentid) {\n        this.commentid = commentid;\n        this.init();\n    }\n\n    async init() {\n        this.registerDeleteButtonListener()\n        this.registerNotifyButtonListener()\n    }\n\n    async registerDeleteButtonListener() {\n\n        let trigger = $('#comment_delete_' + this.commentid);\n        let strObj = [\n            {\n                key: 'confirm',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'confirmdeletecomment',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'deletecomment',\n                component: 'local_qtracker'\n            }\n        ];\n\n        let strings = await Str.get_strings(strObj);\n\n        let modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[2],\n            body: strings[1],\n        }, trigger)\n\n        modal.setSaveButtonText(strings[0])\n        modal.getRoot().on(ModalEvents.save, function (e) {\n            // Stop the default save button behaviour which is to close the modal.\n            e.preventDefault();\n            let form = $('#comment_form_'  + this.commentid);\n            $('<input>').attr({\n                type: \"hidden\",\n                name: \"deletecommentid\",\n                value: this.commentid,\n            }).appendTo(form);\n            form.submit();\n        }.bind(this));\n    }\n\n    async registerNotifyButtonListener() {\n\n        let trigger = $('#comment_message_' + this.commentid);\n        let strObj = [\n            {\n                key: 'confirm',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'confirmsendcomment',\n                component: 'local_qtracker'\n            },\n            {\n                key: 'sendcomment',\n                component: 'local_qtracker'\n            }\n        ];\n\n        let strings = await Str.get_strings(strObj);\n\n        let modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[2],\n            body: strings[1],\n        }, trigger)\n\n        modal.setSaveButtonText(strings[0])\n        modal.getRoot().on(ModalEvents.save, function (e) {\n            // Stop the default save button behaviour which is to close the modal.\n            e.preventDefault();\n            let form = $('#comment_form_'  + this.commentid);\n            $('<input>').attr({\n                type: \"hidden\",\n                name: \"notifycommentid\",\n                value: this.commentid,\n            }).appendTo(form);\n            form.submit();\n        }.bind(this));\n    }\n}\n\n\nexport default IssueCommentControls;\n"],"file":"issue_comment_controls.min.js"}