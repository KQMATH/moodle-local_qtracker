{"version":3,"file":"issue.min.js","sources":["../src/issue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module for representing a question issue.\n *\n * @module     local_qtracker/Issue\n * @class      Issue\n * @package    local_qtracker\n * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2020 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/ajax'], function ($, Str, Ajax) {\n\n    /**\n     * Constructor\n     *\n     * @param {int} id\n     * @param {int} slot\n     * @param {int} contextid\n     *\n     * Each call gets it's own instance of this class.\n     */\n    var Issue = function (id = null, slot = null, contextid) {\n        this.id = id;\n        this.slot = slot;\n        this.contextid = contextid;\n    };\n\n    Issue.STATES = {\n        NEW: \"new\",\n        OPEN: \"open\",\n        CLOSED: \"closed\",\n    };\n\n    /**\n     * @var {int} id The id of this issue\n     * @private\n     */\n    Issue.prototype.id = null;\n\n    /**\n     * @var {int} id The slot for this issue\n     * @private\n     */\n    Issue.prototype.slot = null;\n\n    /**\n     * @var {string} title The title for this issue\n     * @private\n     */\n    Issue.prototype.title = \"\";\n\n    /**\n     * @var {string} title The description for this issue\n     * @private\n     */\n    Issue.prototype.description = \"\";\n\n    Issue.prototype.contextid = null;\n\n    Issue.prototype.isSaved = false;\n\n    Issue.prototype.state = Issue.STATES.NEW;\n\n    /**\n     * Initialise the class.\n     *\n     * @private\n     * @param {int} id\n     */\n    Issue.prototype.setId = function (id) {\n        this.id = id;\n    };\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    Issue.prototype.getId = function () {\n        return this.id;\n    };\n\n    Issue.prototype.getSlot = function () {\n        return this.slot;\n    };\n\n    Issue.prototype.getTitle = function () {\n        return this.title;\n    };\n\n    Issue.prototype.setTitle = function (title) {\n        this.title = title;\n    };\n\n    Issue.prototype.getDescription = function () {\n        return this.description;\n    };\n\n\n    Issue.prototype.setDescription = function (description) {\n        this.description = description;\n    };\n\n    Issue.prototype.changeState = function (state) {\n        this.state = state;\n    };\n\n    Issue.prototype.getState = function () {\n        return this.state;\n    };\n\n    Issue.prototype.getContextid = function () {\n        return this.contextid;\n    };\n\n    /**\n     * @return {Promise}\n     * @param {int} id\n     */\n    Issue.loadData = function (id) {\n        return Ajax.call([\n            { methodname: 'local_qtracker_get_issue', args: { issueid: id } }\n        ])[0];\n    };\n\n    Issue.load = async function (id) {\n        let data = await Issue.loadData(id);\n        let issueData = data.issue;\n        let issue = new Issue(issueData.id, issueData.slot, issueData.contextid);\n        issue.setTitle(issueData.title);\n        issue.setDescription(issueData.description);\n        return issue;\n    }\n\n    Issue.prototype.save = async function () {\n        let result = await Ajax.call([{\n            methodname: 'local_qtracker_edit_issue',\n            args: {\n                issueid: this.getId(),\n                issuetitle: this.getTitle(),\n                issuedescription: this.getDescription(),\n            },\n        }])[0];\n        return result\n    }\n\n    return Issue;\n});\n"],"names":["define","$","Str","Ajax","Issue","id","slot","contextid","STATES","NEW","OPEN","CLOSED","prototype","title","description","isSaved","state","setId","getId","this","getSlot","getTitle","setTitle","getDescription","setDescription","changeState","getState","getContextid","loadData","call","methodname","args","issueid","load","async","issueData","issue","save","issuetitle","issuedescription"],"mappings":";;;;;;;;;;AAyBAA,8BAAO,CAAC,SAAU,WAAY,cAAc,SAAUC,EAAGC,IAAKC,UAWtDC,MAAQ,eAAUC,0DAAK,KAAMC,4DAAO,KAAMC,sDACrCF,GAAKA,QACLC,KAAOA,UACPC,UAAYA,kBAGrBH,MAAMI,OAAS,CACXC,IAAK,MACLC,KAAM,OACNC,OAAQ,UAOZP,MAAMQ,UAAUP,GAAK,KAMrBD,MAAMQ,UAAUN,KAAO,KAMvBF,MAAMQ,UAAUC,MAAQ,GAMxBT,MAAMQ,UAAUE,YAAc,GAE9BV,MAAMQ,UAAUL,UAAY,KAE5BH,MAAMQ,UAAUG,SAAU,EAE1BX,MAAMQ,UAAUI,MAAQZ,MAAMI,OAAOC,IAQrCL,MAAMQ,UAAUK,MAAQ,SAAUZ,SACzBA,GAAKA,IAUdD,MAAMQ,UAAUM,MAAQ,kBACbC,KAAKd,IAGhBD,MAAMQ,UAAUQ,QAAU,kBACfD,KAAKb,MAGhBF,MAAMQ,UAAUS,SAAW,kBAChBF,KAAKN,OAGhBT,MAAMQ,UAAUU,SAAW,SAAUT,YAC5BA,MAAQA,OAGjBT,MAAMQ,UAAUW,eAAiB,kBACtBJ,KAAKL,aAIhBV,MAAMQ,UAAUY,eAAiB,SAAUV,kBAClCA,YAAcA,aAGvBV,MAAMQ,UAAUa,YAAc,SAAUT,YAC/BA,MAAQA,OAGjBZ,MAAMQ,UAAUc,SAAW,kBAChBP,KAAKH,OAGhBZ,MAAMQ,UAAUe,aAAe,kBACpBR,KAAKZ,WAOhBH,MAAMwB,SAAW,SAAUvB,WAChBF,KAAK0B,KAAK,CACb,CAAEC,WAAY,2BAA4BC,KAAM,CAAEC,QAAS3B,OAC5D,IAGPD,MAAM6B,KAAOC,eAAgB7B,QAErB8B,iBADa/B,MAAMwB,SAASvB,KACX+B,MACjBA,MAAQ,IAAIhC,MAAM+B,UAAU9B,GAAI8B,UAAU7B,KAAM6B,UAAU5B,kBAC9D6B,MAAMd,SAASa,UAAUtB,OACzBuB,MAAMZ,eAAeW,UAAUrB,aACxBsB,OAGXhC,MAAMQ,UAAUyB,KAAOH,8BACA/B,KAAK0B,KAAK,CAAC,CAC1BC,WAAY,4BACZC,KAAM,CACFC,QAASb,KAAKD,QACdoB,WAAYnB,KAAKE,WACjBkB,iBAAkBpB,KAAKI,qBAE3B,IAIDnB"}