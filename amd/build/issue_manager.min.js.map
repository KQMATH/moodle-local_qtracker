{"version":3,"sources":["../src/issue_manager.js"],"names":["define","$","Issue","IssueManager","prototype","issues","Map","activeIssue","getActiveIssue","setActiveIssue","slot","newIssue","getIssueBySlot","get","getIssueById","id","issue","getId","addIssue","set","getSlot","loadIssues","issueids","promises","i","length","promise","load","then","response","setId","setTitle","title","setDescription","description","isSaved","push","Promise","all"],"mappings":"w0DAyBAA,OAAM,gCAAC,CAAC,QAAD,CAAW,sBAAX,CAAD,CAAqC,SAAUC,CAAV,CAAaC,CAAb,CAAoB,CAU3D,GAAIC,CAAAA,CAAY,CAAG,UAAY,CAAE,CAAjC,CAMAA,CAAY,CAACC,SAAb,CAAuBC,MAAvB,CAAgC,GAAIC,CAAAA,GAApC,CAEAH,CAAY,CAACC,SAAb,CAAuBG,WAAvB,CAAqC,IAArC,CAEAJ,CAAY,CAACC,SAAb,CAAuBI,cAAvB,CAAwC,UAAY,CAChD,MAAO,MAAKD,WACf,CAFD,CAIAJ,CAAY,CAACC,SAAb,CAAuBK,cAAvB,CAAwC,SAAUC,CAAV,CAAgB,CACpD,GAAIC,CAAAA,CAAQ,CAAG,KAAKC,cAAL,CAAoBF,CAApB,CAAf,CACA,KAAKH,WAAL,CAAmBI,CAAnB,CACA,MAAOA,CAAAA,CACV,CAJD,CAaAR,CAAY,CAACC,SAAb,CAAuBQ,cAAvB,CAAwC,SAAUF,CAAV,CAAgB,CACpD,MAAO,MAAKL,MAAL,CAAYQ,GAAZ,CAAgBH,CAAhB,CACV,CAFD,CAIAP,CAAY,CAACC,SAAb,CAAuBU,YAAvB,CAAsC,SAAUC,CAAV,CAAc,kCACpB,KAAKV,MADe,QAChD,2BAAyC,iCAA7BK,CAA6B,MAAvBM,CAAuB,MACrC,GAAsB,IAAlB,GAAAA,CAAK,CAACC,KAAN,IAA0BD,CAAK,CAACC,KAAN,KAAkBF,CAAhD,CAAoD,CAChD,MAAOC,CAAAA,CACV,CACJ,CAL+C,+BAMhD,QACH,CAPD,CASAb,CAAY,CAACC,SAAb,CAAuBc,QAAvB,CAAkC,SAAUF,CAAV,CAAiB,CAC/C,KAAKX,MAAL,CAAYc,GAAZ,CAAgBH,CAAK,CAACI,OAAN,EAAhB,CAAiCJ,CAAjC,CACH,CAFD,CAIAb,CAAY,CAACC,SAAb,CAAuBiB,UAAvB,CAAoC,UAAyB,CAEzD,eAF0CC,CAE1C,wDAFqD,EAErD,CADIC,CAAQ,CAAG,EACf,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,CAAQ,CAACG,MAA7B,CAAqCD,CAAC,EAAtC,CAA0C,IAChCT,CAAAA,CAAE,CAAGO,CAAQ,CAACE,CAAD,CADmB,CAElCE,CAAO,CAAGxB,CAAK,CAACyB,IAAN,CAAWZ,CAAX,EAAea,IAAf,CAAoB,SAACC,CAAD,CAAc,CAC5C,GAAIb,CAAAA,CAAK,CAAG,CAAI,CAACJ,cAAL,CAAoBiB,CAAQ,CAACb,KAAT,CAAeN,IAAnC,CAAZ,CACA,GAAI,CAACM,CAAL,CAAY,CACRA,CAAK,CAAG,GAAId,CAAAA,CAAJ,CAAU2B,CAAQ,CAACb,KAAT,CAAeD,EAAzB,CAA6Bc,CAAQ,CAACb,KAAT,CAAeN,IAA5C,CACX,CACDM,CAAK,CAACc,KAAN,CAAYD,CAAQ,CAACb,KAAT,CAAeD,EAA3B,EACAC,CAAK,CAACe,QAAN,CAAeF,CAAQ,CAACb,KAAT,CAAegB,KAA9B,EACAhB,CAAK,CAACiB,cAAN,CAAqBJ,CAAQ,CAACb,KAAT,CAAekB,WAApC,EACAlB,CAAK,CAACmB,OAAN,IACA,CAAI,CAACjB,QAAL,CAAcF,CAAd,CACH,CAVa,CAFwB,CAatCO,CAAQ,CAACa,IAAT,CAAcV,CAAd,CACH,CACD,MAAOW,CAAAA,OAAO,CAACC,GAAR,CAAYf,CAAZ,CACV,CAlBD,CAoBA,MAAOpB,CAAAA,CACV,CA3EK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manager for managing question issues.\n *\n * @module     local_qtracker/IssueManager\n * @class      IssueManager\n * @package    local_qtracker\n * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2020 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'local_qtracker/issue'], function ($, Issue) {\n\n    /**\n     * Constructor\n     * @constructor\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var IssueManager = function () {};\n\n    /**\n     * @var {Form} form\n     * @private\n     */\n    IssueManager.prototype.issues = new Map();\n\n    IssueManager.prototype.activeIssue = null;\n\n    IssueManager.prototype.getActiveIssue = function () {\n        return this.activeIssue;\n    };\n\n    IssueManager.prototype.setActiveIssue = function (slot) {\n        let newIssue = this.getIssueBySlot(slot);\n        this.activeIssue = newIssue;\n        return newIssue;\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    IssueManager.prototype.getIssueBySlot = function (slot) {\n        return this.issues.get(slot);\n    };\n\n    IssueManager.prototype.getIssueById = function (id) {\n        for (const [slot, issue] of this.issues) {\n            if (issue.getId() !== null && issue.getId() === id) {\n                return issue;\n            }\n        };\n        return false;\n    };\n\n    IssueManager.prototype.addIssue = function (issue) {\n        this.issues.set(issue.getSlot(), issue);\n    };\n\n    IssueManager.prototype.loadIssues = function (issueids = []) {\n        let promises = [];\n        for (let i = 0; i < issueids.length; i++) {\n            const id = issueids[i];\n            let promise = Issue.load(id).then((response) => {\n                let issue = this.getIssueBySlot(response.issue.slot)\n                if (!issue) {\n                    issue = new Issue(response.issue.id, response.issue.slot);\n                }\n                issue.setId(response.issue.id);\n                issue.setTitle(response.issue.title);\n                issue.setDescription(response.issue.description);\n                issue.isSaved = true;//changeState(Issue.STATES.EXISTING);\n                this.addIssue(issue);\n            });\n            promises.push(promise);\n        }\n        return Promise.all(promises);\n    };\n\n    return IssueManager;\n});\n"],"file":"issue_manager.min.js"}