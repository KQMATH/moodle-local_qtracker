{"version":3,"file":"question_issue_page.min.js","sources":["../src/question_issue_page.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Class for handling question issue page.\n *\n * @module     local_qtracker/QuestionIssuePage\n * @class      QuestionIssuePage\n * @package    local_qtracker\n * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2021 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport Ajax from 'core/ajax';\nimport url from 'core/url';\nimport * as Str from 'core/str';\nimport Sidebar from 'local_qtracker/sidebar';\nimport Dropdown from 'local_qtracker/dropdown';\nimport Issue from 'local_qtracker/issue';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport DropdownEvents from 'local_qtracker/dropdown_events';\nimport { loadIssuesData } from 'local_qtracker/api_helpers';\n\nvar SELECTORS = {\n    TITLE: '[data-region=\"issuetitle\"]',\n    TITLE_TEXT: '[data-region=\"issuetitle-text\"]',\n    TITLE_INPUT: '[data-region=\"issuetitle-input\"]',\n};\n\n/**\n * Constructor\n * @constructor\n * @param {String} courseid\n * @param {int} questionid\n * @param {int} issueid\n *\n * Each call gets it's own instance of this class.\n */\nclass QuestionIssuePage {\n    courseid = null;\n    questionid = null;\n    issueid = null;\n    issue = null;\n    parents = [];\n    filter = new Set(['Open', 'New'])\n\n    constructor(courseid, questionid, issueid) {\n        this.courseid = courseid;\n        this.questionid = questionid;\n        this.issueid = parseInt(issueid);\n        this.issue = null;\n        this.loadSettings()\n\n        this.editingTitle = false;\n        this.init();\n    }\n\n    async init() {\n        this.checkForParents()\n        this.initSidebar()\n        this.initDropdowns();\n        this.registerEditTitleButtonListener()\n    }\n\n    async checkForParents() {\n\n        let parentsData = await this.loadIssueParents(this.issueid);\n        if (parentsData.parents.length > 0) {\n            this.parents = parentsData.parents;\n            let supersededids = this.parents.map((parent) => {\n                return $('<a></a>')\n                    .attr(\"href\", this._getIssueUrl(parent.id))\n                    .html(\"#\" + parent.id).prop('outerHTML');\n            }).join(\", \");\n            this.notify({\n                message: await Str.get_string('issuesuperseded', 'local_qtracker', supersededids),\n                announce: false,\n                type: \"warning\",\n            }, '#qtracker-superseded');\n        }\n    }\n\n    loadSettings() {\n        let filterData = JSON.parse(sessionStorage.getItem('local_qtracker_issue_page_filter'))\n        if (filterData !== null) {\n            filterData.forEach(this.filter.add, this.filter)\n        }\n    }\n\n    saveSettings() {\n        let filterData = Array.from(this.filter);\n        sessionStorage.setItem('local_qtracker_issue_page_filter', JSON.stringify(filterData))\n    }\n\n\n    async loadChildren() {\n        let childrenData = await this.loadIssueChildren(this.issueid);\n        let children = childrenData.children;\n        let items = children.map((item) => [item.id, item.title]);\n        return items;\n    }\n\n    async getIssue() {\n        if (this.issue === null) {\n            this.issue = await Issue.load(this.issueid);\n        }\n        return this.issue;\n    }\n\n    registerEditTitleButtonListener() {\n        $(\".edittitle\").children(\"button\").on('click', async function (e) {\n            let button = $(e.target);\n            if (!this.editingTitle) {\n                button.html(await Str.get_string('save', 'core'));\n                $(SELECTORS.TITLE_INPUT).show();\n                $(SELECTORS.TITLE_TEXT).parent(\"div\").hide();\n                this.editingTitle = true;\n            } else {\n                let title = $(SELECTORS.TITLE_INPUT).val();\n                let issue = await this.getIssue();\n                issue.setTitle(title);\n                let response = await issue.save();\n                if (response.status) {\n                    button.html(await Str.get_string('edit', 'core'));\n                    $(SELECTORS.TITLE_INPUT).hide();\n                    $(SELECTORS.TITLE_TEXT).parent(\"div\").show();\n                    $(SELECTORS.TITLE_TEXT).text(title);\n                    this.editingTitle = false;\n                }\n            }\n        }.bind(this));\n    }\n\n    // aside blocks\n    async initDropdowns() {\n        let issuesDropdown = new Dropdown('#linkedissues-dropdown');\n        issuesDropdown.setItems(await this.loadChildren(), true);\n        this.updateIssueAsideBlock(issuesDropdown.getActiveItems());\n\n        // TODO: Remove the right margin of the content container when the grading panel is hidden so that it expands to full-width.\n        let dropdown = issuesDropdown;\n        dropdown.getRoot().on(DropdownEvents.search, async function (e, str) {\n            let criteria = [];\n            if (str.startsWith('#')) {\n                let id = parseInt(str.substr(1));\n                criteria.push({ key: 'id', value: id });\n            } else {\n                if (str.length > 2) str += \"%\"\n                criteria.push({ key: 'title', value: str });\n            }\n            let issuesResponse = await loadIssuesData(criteria);\n            let issues = issuesResponse.issues;\n            let items = issues.map((item) => {\n                let html = item.title + ' <span class=\"text-muted\"> #' + item.id + '</span>';\n                return [item.id, html];\n            });\n            issuesDropdown.setItems(items);\n            issuesDropdown.renderItems();\n        }.bind(this));\n\n\n        dropdown.getRoot().on(DropdownEvents.click, async function (e, element) {\n            let parentid = parseInt(this.issueid);\n            let childid = parseInt(element.attr(\"data-value\"));\n            let active = dropdown.isActiveItem(childid);\n            if (active) {\n                let response = await this.deleteIssueRelation(parentid, childid);\n                if (response.status) {\n                    this.renderSidebarContent();//TODO: update sidebar issues if exists with new status.\n                    issuesDropdown.setItemStatus(childid, !active)\n                    issuesDropdown.reset();\n                    this.updateIssueAsideBlock(issuesDropdown.getActiveItems())\n                }\n            } else {\n                let modal = await ModalFactory.create({\n                    title: await Str.get_string('subsumeissue', 'local_qtracker'),\n                    body: await Str.get_string('subsumeissueconfirm', 'local_qtracker', { child: childid, parent: parentid }),\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    large: false,\n                })\n                modal.setSaveButtonText(await Str.get_string('confirm', 'core'));\n                modal.getRoot().on(ModalEvents.save, async e => {\n                    // Don't close the modal yet.\n                    e.preventDefault();\n                    // Submit form data.\n                    let response = await this.setIssueRelation(parentid, childid);\n                    if (response.status) {\n                        this.renderSidebarContent();//TODO: update sidebar issues if exists with new status.\n                        issuesDropdown.setItemStatus(childid, !active)\n                        issuesDropdown.reset();\n                        this.updateIssueAsideBlock(issuesDropdown.getActiveItems())\n                    } else {\n                        let issueurl = $('<a></a>')\n                            .attr(\"href\", this._getIssueUrl(childid))\n                            .html(\"#\" + childid).prop('outerHTML');\n\n                        this.notify({\n                            message: await Str.get_string('errorsubsumingissue', 'local_qtracker', issueurl),\n                            announce: true,\n                            closebutton: true,\n                            type: \"error\",\n                        }, '#qtracker-notifications');\n                    }\n                    modal.destroy();\n\n                    //submitEditFormAjax(link, getBody, modal, userEnrolmentId, container.dataset);\n                });\n                // Handle hidden event.\n                modal.getRoot().on(ModalEvents.hidden, () => {\n                    // Destroy when hidden.\n                    modal.destroy();\n                });\n                // Show the modal.\n                modal.show();\n            }\n        }.bind(this))\n\n        issuesDropdown.renderItems();\n    }\n\n    async updateIssueAsideBlock(items) {\n        let elements = []\n\n        if (items.size === 0) {\n            let element = $('<div></div>')\n                .addClass(\"dropdown-item disabled\")\n                .html(await Str.get_string('noitems', 'local_qtracker'))\n                .prop('outerHTML');\n            elements.push(element)\n        }\n\n        items.forEach((html, key) => {\n            let element = $('<a></a>')\n                .addClass(\"list-item border-0 p-1\")\n                .attr(\"href\", this._getIssueUrl(key))\n                .html(html).prop('outerHTML');\n            //<div class=\"list-group-item border-0 {{state}}\">{{{text}}}</div>\n            elements.push(element);\n        });\n        $(\".linkedissues-list\").html(elements);\n    }\n\n    _getIssueUrl(issueid) {\n        let issueurl = url.relativeUrl('/local/qtracker/issue.php', {\n            courseid: this.courseid,\n            issueid: issueid,\n        });\n        return issueurl;\n    }\n\n    async renderSidebarContent() {\n        let state = null;\n        this.sidebar.setLoading(true);\n        this.sidebar.empty();\n\n        // Get issues data.\n        let issuesResponse = await this.loadIssues(this.questionid, state);\n        let issues = issuesResponse.issues;\n\n        // Get users data.\n        let userids = [...new Set(issues.map(issue => issue.userid))];\n        let usersData = await this.loadUsersData(userids);\n\n        // Render issue items.\n        let promises = [];\n        issues.forEach(async issueData => {\n            let userData = usersData.find(({ id }) => id === issueData.userid);\n            if (issueData.id == this.issueid) {\n                return;\n            }\n            promises.push(this.addIssueItem(issueData, userData));\n        });\n\n        self = this;\n        // When all issue item promises are resolved.\n        $.when.apply($, promises).done(function () {\n            self.sidebar.setLoading(false);\n            $.each(arguments, (index, argument) => {\n                self.sidebar.addTemplateItem(argument.html, argument.js);\n            });\n            self.applyFilter();\n        }).catch(e => {\n            console.error(e);\n        });\n    }\n\n    async initSidebar() {\n        let active = this.filter.has(\"Closed\");\n        let sidebarOptions = [{ \"name\": \"toggleclosed\", \"text\": \"Show closed issues\", \"value\": 0, \"checkbox\": true, \"active\": active }];\n        this.sidebar = new Sidebar('#question-issues-sidebar', true, \"left\", false, '30%', '1.25rem', false, sidebarOptions);\n\n        await this.sidebar.render();\n\n        this.sidebar.empty();\n        this.sidebar.setLoading(true);\n\n        // Get question title.\n        let questionData = await this.loadQuestionData(this.questionid);\n        let question = questionData.question;\n        let questionEditUrl = this.getQuestionEditUrl(this.courseid, this.questionid);\n        let link = $('<a></a>').attr(\"href\", questionEditUrl).html(question.name + \" #\" + question.id);\n        this.sidebar.setTitle(link);\n        this.sidebar.show();\n\n        await this.renderSidebarContent();\n\n        // Add logic to sidebar actions (dropdowns)\n        this.sidebar.getContainer().on('click', async function (e) {\n            let element = $(e.target);\n            if (element.hasClass(\"dropdown-item\")) {\n                let dropdownItem = element.attr(\"data-name\");\n                let itemValue = parseInt(element.attr(\"data-value\"));\n                switch (dropdownItem) {\n                    case \"toggleclosed\": // Sidebar toolbar filter\n                        if (element.is(':checked')) {\n                            this.filter.add('Closed');\n                            element.prop('checked', true);\n                        } else {\n                            this.filter.delete('Closed');\n                            element.prop('checked', false);\n                        }\n                        this.applyFilter();\n                        this.saveSettings();\n                        break;\n                    case \"subsume\": // Sidebar item action\n                        //TODO: add issue menu to the sidebar items\n                        let parentid = this.issueid;\n                        let childid = itemValue;\n                        let response = await this.setIssueRelation(parentid, childid);\n                        if (response.status) {\n                            this.renderSidebarContent()\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }.bind(this))\n\n        window.closeIssuesPane = function () { this.sidebar.hide() }.bind(this);\n        window.toggleIssuesPane = function () { this.sidebar.togglePane() }.bind(this);\n    }\n\n    applyFilter() {\n        this.resetFilter();\n        let self = this;\n        this.sidebar.getItems().each(function () {\n            if (!self.filter.has($(this).find(\".badge\").text())) {\n                $(this).hide();\n            }\n        });\n    }\n\n    resetFilter() {\n        this.sidebar.getItems().each(function () {\n            $(this).show();\n        });\n    }\n\n    /**\n     *\n     * @param {object} issueData\n     * @param {object} userData\n     * @return {Promise}\n     */\n    async addIssueItem(issueData, userData, extraClasses = \"\") {\n        // Fetch user data.\n        let issueurl = url.relativeUrl('/local/qtracker/issue.php', {\n            courseid: this.courseid,\n            issueid: issueData.id,\n        });\n        let userurl = url.relativeUrl('/user/view.php', {\n            course: this.courseid,\n            id: userData.id,\n        });\n\n        let actions = {\n            \"trigger\": {\n                \"key\": \"fa-ellipsis-h\",\n                \"title\": \"Options\",\n                \"alt\": \"Show options\",\n                \"extraclasses\": \"\",\n                \"unmappedIcon\": false\n            },\n            \"header\": false,\n            \"items\": [\n                { \"name\": \"subsume\", \"text\": \"Subsume\", \"value\": issueData.id },\n            ]\n        }\n        // Render issues pane\n        let paneContext = {\n            issueurl: issueurl,\n            userurl: userurl,\n            profileimageurl: userData.profileimageurlsmall,\n            fullname: userData.fullname,\n            timecreated: issueData.timecreated,\n            id: issueData.id,\n            title: issueData.title,\n            description: issueData.description,\n            extraclasses: extraClasses\n            //actions: actions // TODO: finish this\n        };\n        let state = issueData.state;\n        paneContext[state] = true;\n\n        return Templates.render('local_qtracker/sidebar_item_issue', paneContext)\n            .then(function (html, js) {\n                return { html: html, js: js };\n            });\n    }\n\n    async loadIssues(id, state = null) {\n        let criteria = [\n            { key: 'questionid', value: id },\n        ];\n        if (state) {\n            criteria.push({ key: 'state', value: state });\n        }\n        let issuesData = await Ajax.call([{\n            methodname: 'local_qtracker_get_issues',\n            args: { criteria: criteria }\n        }])[0];\n\n        return issuesData;\n    }\n\n    async loadUsersData(ids) {\n        let usersData = await Ajax.call([{\n            methodname: 'core_user_get_users_by_field',\n            args: {\n                field: 'id',\n                values: ids\n            }\n        }])[0];\n        return usersData;\n    }\n\n    async setIssueRelation(parentid, childid) {\n        let result = await Ajax.call([{\n            methodname: 'local_qtracker_set_issue_relation',\n            args: {\n                parentid: parentid,\n                childid: childid,\n            }\n        }])[0];\n        return result\n    }\n\n\n    async deleteIssueRelation(parentid, childid) {\n        let result = await Ajax.call([{\n            methodname: 'local_qtracker_delete_issue_relation',\n            args: {\n                parentid: parentid,\n                childid: childid,\n            }\n        }])[0];\n        return result\n    }\n\n    getQuestionEditUrl(courseid, questionid) {\n        let returnurl = encodeURIComponent(location.pathname + location.search);\n        let editurl = url.relativeUrl('/question/bank/editquestion/question.php', {\n            courseid: courseid,\n            id: questionid,\n            returnurl: returnurl,\n        });\n        return editurl;\n    }\n\n    decodeHTML(html) {\n        var doc = new DOMParser().parseFromString(html, \"text/html\");\n        return doc.documentElement.textContent;\n    }\n\n    async loadQuestionData(id) {\n        let userData = await Ajax.call([{\n            methodname: 'local_qtracker_get_question',\n            args: {\n                id: id\n            }\n        }])[0];\n        return userData;\n    }\n\n    async loadIssueParents(id) {\n        let userData;\n        userData = await Ajax.call([{\n            methodname: 'local_qtracker_get_issue_parents',\n            args: {\n                issueid: id\n            }\n        }])[0];\n        return userData;\n    }\n\n    async loadIssueChildren(id) {\n        let userData;\n        userData = await Ajax.call([{\n            methodname: 'local_qtracker_get_issue_children',\n            args: {\n                issueid: id\n            }\n        }])[0];\n        return userData;\n    }\n\n    notify(notification, selector = null) {\n        notification = $.extend({\n            closebutton: false,\n            announce: false,\n            type: 'error',\n            extraclasses: \"show\",\n        }, notification);\n\n        let types = {\n            'success': 'core/notification_success',\n            'info': 'core/notification_info',\n            'warning': 'core/notification_warning',\n            'error': 'core/notification_error',\n        };\n\n        let template = types[notification.type];\n        Templates.render(template, notification)\n            .then((html, js) => {\n                if (selector === null) {\n                    $('#qtracker-notifications').append(html);\n                } else {\n                    $(selector).append(html);\n                }\n                Templates.runTemplateJS(js);\n            })\n            .catch((error) => {\n                console.error(error);\n                throw error;\n            });\n    };\n}\n\nexport default QuestionIssuePage;\n"],"names":["SELECTORS","constructor","courseid","questionid","issueid","Set","parseInt","issue","loadSettings","editingTitle","init","checkForParents","initSidebar","initDropdowns","registerEditTitleButtonListener","parentsData","this","loadIssueParents","parents","length","supersededids","map","parent","attr","_getIssueUrl","id","html","prop","join","notify","message","Str","get_string","announce","type","filterData","JSON","parse","sessionStorage","getItem","forEach","filter","add","saveSettings","Array","from","setItem","stringify","loadIssueChildren","children","item","title","Issue","load","on","async","e","button","target","val","getIssue","setTitle","save","status","hide","show","text","bind","issuesDropdown","Dropdown","setItems","loadChildren","updateIssueAsideBlock","getActiveItems","dropdown","getRoot","DropdownEvents","search","str","criteria","startsWith","substr","push","key","value","items","issues","renderItems","click","element","parentid","childid","active","isActiveItem","deleteIssueRelation","renderSidebarContent","setItemStatus","reset","modal","ModalFactory","create","body","child","types","SAVE_CANCEL","large","setSaveButtonText","ModalEvents","preventDefault","setIssueRelation","issueurl","closebutton","destroy","hidden","elements","size","addClass","url","relativeUrl","sidebar","setLoading","empty","loadIssues","userids","userid","usersData","loadUsersData","promises","userData","find","_ref","issueData","addIssueItem","self","when","apply","$","done","each","arguments","index","argument","addTemplateItem","js","applyFilter","catch","console","error","sidebarOptions","has","Sidebar","render","question","loadQuestionData","questionEditUrl","getQuestionEditUrl","link","name","getContainer","hasClass","dropdownItem","itemValue","is","delete","window","closeIssuesPane","toggleIssuesPane","togglePane","resetFilter","getItems","extraClasses","userurl","course","paneContext","profileimageurl","profileimageurlsmall","fullname","timecreated","description","extraclasses","state","Templates","then","Ajax","call","methodname","args","ids","field","values","returnurl","encodeURIComponent","location","pathname","decodeHTML","DOMParser","parseFromString","documentElement","textContent","notification","selector","template","extend","append","runTemplateJS"],"mappings":"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"}