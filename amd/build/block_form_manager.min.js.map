{"version":3,"file":"block_form_manager.min.js","sources":["../src/block_form_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manager for a Question Tracker Block form.\n *\n * @module     local_qtracker/BlockFormManager\n * @class      BlockFormManager\n * @package    local_qtracker\n * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2020 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/templates', 'core/ajax', 'local_qtracker/issue', 'local_qtracker/issue_manager'],\n    function ($, Str, Templates, Ajax, Issue, IssueManager) {\n        var SELECTORS = {\n            SLOT: '[name=\"slot\"]',\n            SLOT_SELECT_OPTION: '[name=\"slot\"] option',\n            TITLE: '[name=\"issuetitle\"]',\n            DESCRIPTION: '[name=\"issuedescription\"]',\n            SUBMIT_BUTTON: 'button[type=\"submit\"]',\n            DELETE_BUTTON: '#qtracker-delete',\n        };\n\n        let VALIDATION_ELEMENTS = [\n            SELECTORS.TITLE,\n            SELECTORS.DESCRIPTION,\n        ];\n\n        var NOTIFICATION_DURATION = 7500;\n        var notificationTimeoutHandle = null;\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {string} issueids\n         * @param {int} contextid\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var BlockFormManager = function (selector, issueids, contextid) {\n            this.contextid = contextid;\n            this.form = $(selector);\n            this.form.closest('.card-text').prepend('<span class=\"notifications\" id=\"qtracker-notifications\"></span>');\n            this.issueManager = new IssueManager();\n            this.init(JSON.parse(issueids));\n        };\n\n        /**\n         * @var {Form} form\n         * @private\n         */\n        BlockFormManager.prototype.form = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        BlockFormManager.prototype.contextid = -1;\n\n        /**\n         * @var {int} issueid\n         * @private\n         */\n        BlockFormManager.prototype.issueid = null;\n\n        /**\n         * @var {issue[]} issues\n         * @private\n         */\n        BlockFormManager.prototype.issues = [];\n\n        /**\n         * @var {issue_manager} issueManager\n         * @private\n         */\n        BlockFormManager.prototype.issueManager = null;\n\n        /**\n         * Initialise the class.\n         *\n         * @param {*[]} issueids selector used to find triggers for the new question issue.\n         * @private\n         */\n        BlockFormManager.prototype.init = function (issueids = []) {\n            // Init all slots\n            let slots = $(SELECTORS.SLOT_SELECT_OPTION);\n            if (slots.length == 0) {\n                slots = $(SELECTORS.SLOT);\n            }\n            slots.map((index, option) => {\n                let issue = new Issue(null, parseInt(option.value), this.contextid);\n                issue.isSaved = false;// ChangeState(Issue.STATES.NEW);\n                this.issueManager.addIssue(issue);\n            });\n\n\n            this.issueManager.loadIssues(issueids).then(() => {\n\n                var formData = new FormData(this.form[0]);\n                this.issueManager.setActiveIssue(parseInt(formData.get('slot')));\n\n                this.reflectFormState();\n\n                // Issue title event listener.\n                let titleElement = this.form.find(SELECTORS.TITLE);\n                titleElement.change((event) => {\n                    this.issueManager.getActiveIssue().setTitle(event.target.value);\n                });\n                /* $(document).on(qtrackerEvents.CHANGED_SLOT_BLOCK_FORM, (event, value) => {\n                    titleElement.val(value);\n                }); */\n\n                // Issue description event listener.\n                let descriptionElement = this.form.find(SELECTORS.DESCRIPTION);\n                descriptionElement.change((event) => {\n                    this.issueManager.getActiveIssue().setDescription(event.target.value);\n                });\n                /* $(document).on(qtrackerEvents.CHANGED_SLOT_BLOCK_FORM, (event, value) => {\n                    descriptionElement.val(value)\n                }); */\n\n                //\n\n                // Load existing issues.\n                var slotElement = this.form.find(SELECTORS.SLOT);\n                slotElement.change(this.handleSlotChange.bind(this));\n\n                this.form.on('submit', this.submitFormAjax.bind(this));\n\n            }).catch((error) => {\n                console.error(error);\n            });\n        };\n\n        BlockFormManager.prototype.handleSlotChange = function (e) {\n            this.issueManager.setActiveIssue(parseInt(e.target.value));\n            this.reflectFormState();\n            this.resetValidation();\n        };\n\n        BlockFormManager.prototype.reflectFormState = function () {\n            let issue = this.issueManager.getActiveIssue();\n            if (issue.isSaved === true) { // State === Issue.STATES.EXISTING) {\n                this.toggleDeleteButton(true);\n                this.toggleUpdateButton(true);\n            } else if (issue.isSaved === false) { // State === Issue.STATES.NEW) {\n                this.clearForm();\n            }\n\n            this.restoreForm();\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @param response\n         * @private\n         */\n        BlockFormManager.prototype.handleFormSubmissionResponse = function (response) {\n\n            // TODO: handle response.status === false\n            // TODO: handle response.warning ...\n\n            // We could trigger an event instead.\n            // Yuk.\n            Y.use('moodle-core-formchangechecker', function () {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n            // Document.location.reload();\n\n            this.issueManager.getActiveIssue().setId(response.issueid);\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @param response\n         * @private\n         */\n        BlockFormManager.prototype.handleFormSubmissionFailure = function (response) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            console.error(\"An error occured\");\n            console.error(response);\n        };\n\n        BlockFormManager.prototype.clearForm = function () {\n            // Remove delete button.\n            this.form.find('#qtracker-delete').remove();\n            this.resetValidation();\n            Str.get_string('submitnewissue', 'local_qtracker').then(function (string) {\n                this.form.find('button[type=\"submit\"]').html(string);\n            }.bind(this));\n        };\n\n        BlockFormManager.prototype.restoreForm = function () {\n            let issue = this.issueManager.getActiveIssue();\n            this.form.find('[name=\"issuetitle\"]').val(issue.getTitle());\n            this.form.find('[name=\"issuedescription\"]').val(issue.getDescription());\n\n        };\n\n        /**\n         * @method editIssue\n         * @private\n         */\n        BlockFormManager.prototype.editIssue = function () {\n            var formData = new FormData(this.form[0]);\n            Ajax.call([{\n                methodname: 'local_qtracker_edit_issue',\n                args: {\n                    issueid: this.issueManager.getActiveIssue().getId(),\n                    issuetitle: formData.get('issuetitle'),\n                    issuedescription: formData.get('issuedescription'),\n                },\n                done: function (response) {\n                    Str.get_string('issueupdated', 'local_qtracker').then(function (string) {\n                        let notification = {\n                            message: string,\n                            announce: true,\n                            type: \"success\",\n                        };\n                        this.notify(notification);\n                    }.bind(this));\n                    this.handleFormSubmissionResponse(response);\n                }.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n\n        /**\n         * @method editIssue\n         * @private\n         */\n        BlockFormManager.prototype.deleteIssue = function () {\n            Ajax.call([{\n                methodname: 'local_qtracker_delete_issue',\n                args: {\n                    issueid: this.issueManager.getActiveIssue().getId(),\n                },\n                done: function () {\n                    Str.get_string('issuedeleted', 'local_qtracker').then(function (string) {\n                        let notification = {\n                            message: string,\n                            announce: true,\n                            type: \"success\",\n                        };\n                        this.notify(notification);\n                    }.bind(this));\n                    this.issueManager.getActiveIssue().isSaved = false;// ChangeState(Issue.STATES.NEW);;\n                    this.clearForm();\n                }.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         */\n        BlockFormManager.prototype.createIssue = function () {\n            var formData = new FormData(this.form[0]);\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'local_qtracker_new_issue',\n                args: {\n                    qubaid: formData.get('qubaid'),\n                    slot: formData.get('slot'),\n                    contextid: this.contextid,\n                    issuetitle: formData.get('issuetitle'),\n                    issuedescription: formData.get('issuedescription'),\n                },\n                done: function (response) {\n                    Str.get_string('issuecreated', 'local_qtracker').then(function (string) {\n                        let notification = {\n                            message: string,\n                            announce: true,\n                            type: \"success\",\n                        };\n                        this.notify(notification);\n                    }.bind(this));\n                    this.issueManager.getActiveIssue().isSaved = true;// ChangeState(Issue.STATES.EXISTING)\n                    // This.setAction(ACTION.EDITISSUE);\n                    // TODO: add delete button.\n                    this.toggleUpdateButton(true);\n                    this.toggleDeleteButton(true);\n\n                    this.handleFormSubmissionResponse(response);\n                }.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n\n        /**\n         * Cancel any typing pause timer.\n         */\n        BlockFormManager.prototype.cancelNotificationTimer = function () {\n            if (notificationTimeoutHandle) {\n                clearTimeout(notificationTimeoutHandle);\n            }\n            notificationTimeoutHandle = null;\n        };\n\n        BlockFormManager.prototype.notify = function (notification) {\n            notification = $.extend({\n                closebutton: true,\n                announce: true,\n                type: 'error',\n                extraclasses: \"show\",\n            }, notification);\n\n            let types = {\n                'success': 'core/notification_success',\n                'info': 'core/notification_info',\n                'warning': 'core/notification_warning',\n                'error': 'core/notification_error',\n            };\n\n            this.cancelNotificationTimer();\n\n            let template = types[notification.type];\n            Templates.render(template, notification)\n                .then((html, js) => {\n                    $('#qtracker-notifications').html(html);\n                    Templates.runTemplateJS(js);\n\n                    notificationTimeoutHandle = setTimeout(() => {\n                        $('#qtracker-notifications').find('.alert').alert('close');\n                    }, NOTIFICATION_DURATION);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    throw error;\n                });\n        };\n        /**\n         * @method handleFormSubmissionFailure\n         * @param {boolean} show\n         * @private\n         */\n        BlockFormManager.prototype.toggleUpdateButton = function (show) {\n            if (show) {\n                Str.get_string('update', 'core').then(function (updateStr) {\n                    this.form.find(SELECTORS.SUBMIT_BUTTON).html(updateStr);\n                }.bind(this));\n            } else {\n                Str.get_string('submitnewissue', 'local_qtracker').then(function (updateStr) {\n                    this.form.find(SELECTORS.SUBMIT_BUTTON).html(updateStr);\n                }.bind(this));\n            }\n        };\n        /**\n         * @method handleFormSubmissionFailure\n         * @param {boolean} show\n         * @private\n         */\n        BlockFormManager.prototype.toggleDeleteButton = function (show) {\n            const context = {\n                type: \"button\",\n                classes: \"col-auto\",\n                label: \"Delete\",\n                id: \"qtracker-delete\",\n            };\n\n            let deleteButton = this.form.find(SELECTORS.DELETE_BUTTON);\n            if (deleteButton.length == 0 && show) {\n                Templates.render('local_qtracker/button', context)\n                    .then(function (html, js) {\n                        var container = this.form.find('button').closest(\".form-row\");\n                        Templates.appendNodeContents(container, html, js);\n                        this.form.find('#qtracker-delete').on('click', function () {\n                            this.deleteIssue();\n                        }.bind(this));\n                    }.bind(this));\n            } else {\n                if (show) {\n                    deleteButton.show();\n                } else {\n                    deleteButton.hide();\n                }\n            }\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @param {string} newaction\n         * @private\n         */\n        BlockFormManager.prototype.setAction = function (newaction) {\n\n            this.form.data('action', newaction);\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        BlockFormManager.prototype.submitFormAjax = function (e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!this.validateForm()) {\n                return;\n            }\n\n\n            if (this.issueManager.getActiveIssue().isSaved === true) {\n                this.editIssue();\n            } else {\n                this.createIssue();\n            }\n            /*\n                        Var state = this.issueManager.getActiveIssue().getState();\n                        switch (state) {\n                            case Issue.STATES.NEW:\n                                this.createIssue();\n                                break;\n                            case Issue.STATES.EXISTING:\n                                this.editIssue();\n                                break;\n                            case Issue.STATES.DELETED:\n                                this.issueManager.getActiveIssue().changeState(Issue.STATES.NEW)\n                                this.createIssue();\n                                break;\n                            default:\n                                break;\n                        }*/\n        };\n\n        BlockFormManager.prototype.validateForm = function () {\n            let valid = true;\n            VALIDATION_ELEMENTS.forEach(selector => {\n                let element = this.form.find(selector);\n                if (element.val() != \"\" && element.prop(\"validity\").valid) {\n                    element.removeClass(\"is-invalid\").addClass(\"is-valid\");\n                } else {\n                    element.removeClass(\"is-valid\").addClass(\"is-invalid\");\n                    valid = false;\n                }\n            });\n            return valid;\n        };\n\n        BlockFormManager.prototype.resetValidation = function () {\n            VALIDATION_ELEMENTS.forEach(selector => {\n                let element = this.form.find(selector);\n                element.removeClass(\"is-invalid\").removeClass(\"is-valid\");\n            });\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        BlockFormManager.prototype.submitForm = function (e) {\n            e.preventDefault();\n            this.form.submit();\n        };\n\n        return /** @alias module:local_qtracker/BlockFormManager */ {\n\n            /**\n             * Initialise the module.\n             *\n             * @method init\n             * @param {string} selector The selector used to find the form for to use for this module.\n             * @param {string} issueids The ids of existing issues to load.\n             * @param {int} contextid\n             * @return {BlockFormManager}\n             */\n            init: function (selector, issueids, contextid) {\n                return new BlockFormManager(selector, issueids, contextid);\n            }\n        };\n    });\n"],"names":["define","$","Str","Templates","Ajax","Issue","IssueManager","SELECTORS","VALIDATION_ELEMENTS","notificationTimeoutHandle","BlockFormManager","selector","issueids","contextid","form","closest","prepend","issueManager","init","JSON","parse","prototype","issueid","issues","slots","length","map","index","option","issue","parseInt","value","this","isSaved","addIssue","loadIssues","then","formData","FormData","setActiveIssue","get","reflectFormState","find","change","event","getActiveIssue","setTitle","target","setDescription","handleSlotChange","bind","on","submitFormAjax","catch","error","console","e","resetValidation","toggleDeleteButton","toggleUpdateButton","clearForm","restoreForm","handleFormSubmissionResponse","response","Y","use","M","core_formchangechecker","reset_form_dirty_state","setId","handleFormSubmissionFailure","remove","get_string","string","html","val","getTitle","getDescription","editIssue","call","methodname","args","getId","issuetitle","issuedescription","done","notification","message","announce","type","notify","fail","deleteIssue","createIssue","qubaid","slot","cancelNotificationTimer","clearTimeout","extend","closebutton","extraclasses","template","render","js","runTemplateJS","setTimeout","alert","show","updateStr","context","classes","label","id","deleteButton","container","appendNodeContents","hide","setAction","newaction","data","preventDefault","stopPropagation","validateForm","valid","forEach","element","prop","removeClass","addClass","submitForm","submit"],"mappings":"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"}