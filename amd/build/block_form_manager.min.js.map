{"version":3,"sources":["../src/block_form_manager.js"],"names":["define","$","Str","Templates","Ajax","Issue","IssueManager","SELECTORS","SLOT","SLOT_SELECT_OPTION","TITLE","DESCRIPTION","SUBMIT_BUTTON","DELETE_BUTTON","VALIDATION_ELEMENTS","notificationTimeoutHandle","BlockFormManager","selector","issueids","contextid","form","closest","prepend","issueManager","init","JSON","parse","prototype","issueid","issues","slots","length","map","index","option","issue","parseInt","value","isSaved","addIssue","loadIssues","then","formData","FormData","setActiveIssue","get","reflectFormState","titleElement","find","change","event","getActiveIssue","setTitle","target","descriptionElement","setDescription","slotElement","handleSlotChange","bind","on","submitFormAjax","catch","error","console","e","resetValidation","toggleDeleteButton","toggleUpdateButton","clearForm","restoreForm","handleFormSubmissionResponse","response","log","Y","use","M","core_formchangechecker","reset_form_dirty_state","setId","handleFormSubmissionFailure","remove","get_string","string","html","val","getTitle","getDescription","editIssue","call","methodname","args","getId","issuetitle","issuedescription","done","notify","message","announce","type","fail","deleteIssue","createIssue","qubaid","slot","cancelNotificationTimer","clearTimeout","notification","extend","closebutton","extraclasses","template","render","js","runTemplateJS","setTimeout","alert","show","updateStr","deleteButton","classes","label","id","container","appendNodeContents","hide","setAction","newaction","data","preventDefault","stopPropagation","validateForm","valid","forEach","element","prop","removeClass","addClass","submitForm","submit"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manager for a Question Tracker Block form.\n *\n * @module     local_qtracker/BlockFormManager\n * @class      BlockFormManager\n * @package    local_qtracker\n * @author     André Storhaug <andr3.storhaug@gmail.com>\n * @copyright  2020 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/templates', 'core/ajax', 'local_qtracker/issue', 'local_qtracker/issue_manager'],\n    function ($, Str, Templates, Ajax, Issue, IssueManager) {\n        var SELECTORS = {\n            SLOT: '[name=\"slot\"]',\n            SLOT_SELECT_OPTION: '[name=\"slot\"] option',\n            TITLE: '[name=\"issuetitle\"]',\n            DESCRIPTION: '[name=\"issuedescription\"]',\n            SUBMIT_BUTTON: 'button[type=\"submit\"]',\n            DELETE_BUTTON: '#qtracker-delete',\n        }\n\n        let VALIDATION_ELEMENTS = [\n            SELECTORS.TITLE,\n            SELECTORS.DESCRIPTION,\n        ];\n\n        var NOTIFICATION_DURATION = 7500;\n        var notificationTimeoutHandle = null;\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var BlockFormManager = function (selector, issueids, contextid) {\n            this.contextid = contextid;\n            this.form = $(selector);\n            this.form.closest('.card-text').prepend('<span class=\"notifications\" id=\"qtracker-notifications\"></span>');\n            this.issueManager = new IssueManager();\n            this.init(JSON.parse(issueids));\n        };\n\n        /**\n         * @var {Form} form\n         * @private\n         */\n        BlockFormManager.prototype.form = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        BlockFormManager.prototype.contextid = -1;\n\n        /**\n         * @var {int} issueid\n         * @private\n         */\n        BlockFormManager.prototype.issueid = null;\n\n        /**\n         * @var {int} issueid\n         * @private\n         */\n        BlockFormManager.prototype.issues = [];\n\n        /**\n         * @var {int} issueid\n         * @private\n         */\n        BlockFormManager.prototype.issueManager = null;\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new question issue.\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.init = function (issueids = []) {\n            // Init all slots\n            let slots = $(SELECTORS.SLOT_SELECT_OPTION);\n            if (slots.length == 0) slots = $(SELECTORS.SLOT);\n            slots.map((index, option) => {\n                let issue = new Issue(null, parseInt(option.value), this.contextid);\n                issue.isSaved = false;//changeState(Issue.STATES.NEW);\n                this.issueManager.addIssue(issue);\n            });\n\n\n            this.issueManager.loadIssues(issueids).then(() => {\n\n                var formData = new FormData(this.form[0]);\n                this.issueManager.setActiveIssue(parseInt(formData.get('slot')));\n\n                this.reflectFormState()\n\n                // Issue title event listener.\n                let titleElement = this.form.find(SELECTORS.TITLE)\n                titleElement.change((event) => {\n                    this.issueManager.getActiveIssue().setTitle(event.target.value);\n                });\n                /* $(document).on(qtrackerEvents.CHANGED_SLOT_BLOCK_FORM, (event, value) => {\n                    titleElement.val(value);\n                }); */\n\n                // Issue description event listener.\n                let descriptionElement = this.form.find(SELECTORS.DESCRIPTION)\n                descriptionElement.change((event) => {\n                    this.issueManager.getActiveIssue().setDescription(event.target.value);\n                });\n                /* $(document).on(qtrackerEvents.CHANGED_SLOT_BLOCK_FORM, (event, value) => {\n                    descriptionElement.val(value)\n                }); */\n\n                //\n\n\n                // Load existing issues.\n                var slotElement = this.form.find(SELECTORS.SLOT);\n                slotElement.change(this.handleSlotChange.bind(this));\n\n                this.form.on('submit', this.submitFormAjax.bind(this));\n\n            }).catch((error) => {\n                console.error(error);\n            });\n        };\n\n        BlockFormManager.prototype.handleSlotChange = function (e) {\n            this.issueManager.setActiveIssue(parseInt(e.target.value))\n            this.reflectFormState();\n            this.resetValidation()\n        }\n\n        BlockFormManager.prototype.reflectFormState = function () {\n            let issue = this.issueManager.getActiveIssue();\n            if (issue.isSaved === true) { //state === Issue.STATES.EXISTING) {\n                this.toggleDeleteButton(true);\n                this.toggleUpdateButton(true);\n            } else if (issue.isSaved === false) {//state === Issue.STATES.NEW) {\n                this.clearForm();\n            }\n\n            this.restoreForm();\n        }\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.handleFormSubmissionResponse = function (response) {\n\n            // TODO: handle response.status === false\n            // TODO: handle response.warning ...\n\n            // We could trigger an event instead.\n            // Yuk.\n            console.log(\"jijjijij\")\n            Y.use('moodle-core-formchangechecker', function () {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n            //document.location.reload();\n\n            this.issueManager.getActiveIssue().setId(response.issueid);\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.handleFormSubmissionFailure = function (response) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            console.error(\"An error occured\");\n            console.error(response);\n        };\n\n        BlockFormManager.prototype.clearForm = function () {\n            // Remove delete button.\n            this.form.find('#qtracker-delete').remove();\n            this.resetValidation();\n            Str.get_string('submitnewissue', 'local_qtracker').then(function (string) {\n                this.form.find('button[type=\"submit\"]').html(string);\n            }.bind(this));\n        }\n\n        BlockFormManager.prototype.restoreForm = function () {\n            let issue = this.issueManager.getActiveIssue();\n            this.form.find('[name=\"issuetitle\"]').val(issue.getTitle());\n            this.form.find('[name=\"issuedescription\"]').val(issue.getDescription());\n\n        };\n\n        /**\n         * @method editIssue\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.editIssue = function () {\n            var formData = new FormData(this.form[0]);\n            Ajax.call([{\n                methodname: 'local_qtracker_edit_issue',\n                args: {\n                    issueid: this.issueManager.getActiveIssue().getId(),\n                    issuetitle: formData.get('issuetitle'),\n                    issuedescription: formData.get('issuedescription'),\n                },\n                done: function (response) {\n                    Str.get_string('issueupdated', 'local_qtracker').then(function (string) {\n                        let notification = {\n                            message: string,\n                            announce: true,\n                            type: \"success\",\n                        };\n                        this.notify(notification);\n                    }.bind(this));\n                    this.handleFormSubmissionResponse(response);\n                }.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n        /**\n         * @method editIssue\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.deleteIssue = function () {\n            Ajax.call([{\n                methodname: 'local_qtracker_delete_issue',\n                args: {\n                    issueid: this.issueManager.getActiveIssue().getId(),\n                },\n                done: function (response) {\n                    Str.get_string('issuedeleted', 'local_qtracker').then(function (string) {\n                        let notification = {\n                            message: string,\n                            announce: true,\n                            type: \"success\",\n                        };\n                        this.notify(notification);\n                    }.bind(this));\n                    this.issueManager.getActiveIssue().isSaved = false;//changeState(Issue.STATES.NEW);;\n                    this.clearForm();\n                }.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.createIssue = function () {\n            var formData = new FormData(this.form[0]);\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'local_qtracker_new_issue',\n                args: {\n                    qubaid: formData.get('qubaid'),\n                    slot: formData.get('slot'),\n                    contextid: this.contextid,\n                    issuetitle: formData.get('issuetitle'),\n                    issuedescription: formData.get('issuedescription'),\n                },\n                done: function (response) {\n                    Str.get_string('issuecreated', 'local_qtracker').then(function (string) {\n                        let notification = {\n                            message: string,\n                            announce: true,\n                            type: \"success\",\n                        };\n                        this.notify(notification);\n                    }.bind(this));\n                    this.issueManager.getActiveIssue().isSaved = true;//changeState(Issue.STATES.EXISTING)\n                    //this.setAction(ACTION.EDITISSUE);\n                    // TODO: add delete button.\n                    this.toggleUpdateButton(true);\n                    this.toggleDeleteButton(true);\n\n                    this.handleFormSubmissionResponse(response);\n                }.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this)\n            }]);\n        };\n\n        /**\n         * Cancel any typing pause timer.\n         */\n        BlockFormManager.prototype.cancelNotificationTimer = function () {\n            if (notificationTimeoutHandle) {\n                clearTimeout(notificationTimeoutHandle);\n            }\n            notificationTimeoutHandle = null;\n        }\n\n        BlockFormManager.prototype.notify = function (notification) {\n            notification = $.extend({\n                closebutton: true,\n                announce: true,\n                type: 'error',\n                extraclasses: \"show\",\n            }, notification);\n\n            let types = {\n                'success': 'core/notification_success',\n                'info': 'core/notification_info',\n                'warning': 'core/notification_warning',\n                'error': 'core/notification_error',\n            };\n\n            this.cancelNotificationTimer();\n\n            let template = types[notification.type];\n            Templates.render(template, notification)\n                .then((html, js) => {\n                    $('#qtracker-notifications').html(html);\n                    Templates.runTemplateJS(js);\n\n                    notificationTimeoutHandle = setTimeout(() => {\n                        $('#qtracker-notifications').find('.alert').alert('close');\n                    }, NOTIFICATION_DURATION);\n                })\n                .catch((error) => {\n                    console.error(error)\n                });\n        }\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.toggleUpdateButton = function (show) {\n            if (show) {\n                Str.get_string('update', 'core').then(function (updateStr) {\n                    this.form.find(SELECTORS.SUBMIT_BUTTON).html(updateStr);\n                }.bind(this));\n            } else {\n                Str.get_string('submitnewissue', 'local_qtracker').then(function (updateStr) {\n                    this.form.find(SELECTORS.SUBMIT_BUTTON).html(updateStr);\n                }.bind(this));\n            }\n        }\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.toggleDeleteButton = function (show) {\n            const context = {\n                type: \"button\",\n                classes: \"col-auto\",\n                label: \"Delete\",\n                id: \"qtracker-delete\",\n            };\n\n            let deleteButton = this.form.find(SELECTORS.DELETE_BUTTON);\n            if (deleteButton.length == 0 && show) {\n                Templates.render('local_qtracker/button', context)\n                    .then(function (html, js) {\n                        var container = this.form.find('button').closest(\".form-row\");\n                        Templates.appendNodeContents(container, html, js);\n                        this.form.find('#qtracker-delete').on('click', function () {\n                            this.deleteIssue()\n                        }.bind(this));\n                    }.bind(this));\n            } else {\n                if (show) {\n                    deleteButton.show();\n                } else {\n                    deleteButton.hide();\n                }\n            }\n        }\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        BlockFormManager.prototype.setAction = function (newaction) {\n\n            this.form.data('action', newaction);\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        BlockFormManager.prototype.submitFormAjax = function (e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!this.validateForm()) {\n                return;\n            }\n\n\n            if (this.issueManager.getActiveIssue().isSaved === true) {\n                this.editIssue();\n            } else {\n                this.createIssue();\n            }\n/*\n            var state = this.issueManager.getActiveIssue().getState();\n            switch (state) {\n                case Issue.STATES.NEW:\n                    this.createIssue();\n                    break;\n                case Issue.STATES.EXISTING:\n                    this.editIssue();\n                    break;\n                case Issue.STATES.DELETED:\n                    this.issueManager.getActiveIssue().changeState(Issue.STATES.NEW)\n                    this.createIssue();\n                    break;\n                default:\n                    break;\n            }*/\n        };\n\n        BlockFormManager.prototype.validateForm = function () {\n            let valid = true;\n            VALIDATION_ELEMENTS.forEach(selector => {\n                let element = this.form.find(selector)\n                if (element.val() != \"\" && element.prop(\"validity\").valid) {\n                    element.removeClass(\"is-invalid\").addClass(\"is-valid\");\n                } else {\n                    element.removeClass(\"is-valid\").addClass(\"is-invalid\");\n                    valid = false;\n                }\n            });\n            return valid;\n        };\n\n        BlockFormManager.prototype.resetValidation = function () {\n            VALIDATION_ELEMENTS.forEach(selector => {\n                let element = this.form.find(selector)\n                element.removeClass(\"is-invalid\").removeClass(\"is-valid\")\n            });\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        BlockFormManager.prototype.submitForm = function (e) {\n            e.preventDefault();\n            this.form.submit();\n        };\n\n        return /** @alias module:local_qtracker/BlockFormManager */ {\n\n            /**\n             * Initialise the module.\n             *\n             * @method init\n             * @param {string} selector The selector used to find the form for to use for this module.\n             * @param {string} issueids The ids of existing issues to load.\n             * @return {BlockFormManager}\n             */\n            init: function (selector, issueids, contextid) {\n                return new BlockFormManager(selector, issueids, contextid);\n            }\n        };\n    });\n"],"file":"block_form_manager.min.js"}