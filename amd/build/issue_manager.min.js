/**
 * Manager for managing question issues.
 *
 * @module     local_qtracker/IssueManager
 * @class      IssueManager
 * @package    local_qtracker
 * @author     Andr√© Storhaug <andr3.storhaug@gmail.com>
 * @copyright  2020 NTNU
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_qtracker/issue_manager",["jquery","local_qtracker/issue"],(function($,Issue){var IssueManager=function(){};return IssueManager.prototype.issues=new Map,IssueManager.prototype.activeIssue=null,IssueManager.prototype.getActiveIssue=function(){return this.activeIssue},IssueManager.prototype.setActiveIssue=function(slot){let newIssue=this.getIssueBySlot(slot);return this.activeIssue=newIssue,newIssue},IssueManager.prototype.getIssueBySlot=function(slot){return this.issues.get(slot)},IssueManager.prototype.getIssueById=function(id){for(const[slot,issue]of this.issues)if(null!==issue.getId()&&issue.getId()===id)return issue;return!1},IssueManager.prototype.addIssue=function(issue){this.issues.set(issue.getSlot(),issue)},IssueManager.prototype.loadIssues=function(){let issueids=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],promises=[];for(let i=0;i<issueids.length;i++){const id=issueids[i];let promise=Issue.loadData(id).then((response=>{let issue=this.getIssueBySlot(response.issue.slot);issue||(issue=new Issue(response.issue.id,response.issue.slot)),issue.setId(response.issue.id),issue.setTitle(response.issue.title),issue.setDescription(response.issue.description),issue.isSaved=!0,this.addIssue(issue)}));promises.push(promise)}return Promise.all(promises)},IssueManager}));

//# sourceMappingURL=issue_manager.min.js.map